multiple = "all",
by = c("Iteration",
"mod",
"target_measures",
"n_iter",
"N",
"N_dev",
"N_imp",
"N_val",
"Y_prev",
"X_categorical",
"R_prev",
"gamma_x1",
"gamma_x2",
"gamma_U")) %>%
rename("dataset_imp" = "dataset.x",
"dataset_val" = "dataset.y",
"scenario_number_imp" = "scenario_number.x",
"scenario_number_val" = "scenario_number.y",
"DAG_type_imp" = "DAG_type.x",
"DAG_type_val" = "DAG_type.y") %>%
mutate(bias = estimates - true_estimates,
DAG_combined = paste(DAG_type_imp, DAG_type_val, sep = "+")) %>%
group_by(dataset_imp,
dataset_val,
target_measures,
scenario_number_imp,
scenario_number_val,
N,
N_dev,
N_val,
N_imp,
Y_prev,
R_prev,
X_categorical,
beta_x1.x,
beta_x2.x,
beta_U.x,
beta_x1.y,
beta_x2.y,
beta_U.y,
gamma_x1,
gamma_x2,
gamma_U,
DAG_combined) %>%
summarise(bias_mean = mean(bias), LCI = quantile(bias, 0.025), UCI = quantile(bias, 0.975)) %>%
mutate(scenario_combined = paste(scenario_number_imp, scenario_number_val, sep = "+"))
#NB2: change factor levels of target measures
MNARXY_ALL <- MNARXY_MEAN_BIAS %>% mutate("imp_method" = "Imputed by mean") %>%
bind_rows(MNARXY_MInoY_BIAS %>% mutate("imp_method" = "MI without Y")) %>%
bind_rows(MNARXY_MIwithY_BIAS %>% mutate("imp_method" = "MI with Y"))
plot_scenario <- function(sn) {
print(sn)
MNARXY_ALL = MNARXY_ALL
MNARXY_ALL$target_measures <- factor(MNARXY_ALL$target_measures, levels = c("AUC", "Calibration Intercept", "Calibration Slope", "Brier Score"))
plot <- ggplot(data = MNARY_ALL %>%
filter(scenario_combined == sn),
aes(x = bias_mean, y = dataset_val, color = factor(target_measures),
shape = factor(target_measures))) +
geom_errorbar(aes(xmin = LCI, xmax = UCI), width=.1) +
geom_point(size = 3, stroke = 0.5) +
guides(color = guide_legend(reverse = TRUE)) +
scale_shape_manual(values = c(8, 17, 16, 15)) +
scale_color_brewer(palette = "Set1") +
geom_vline(xintercept = 0, linetype="dotted") +
xlab("Bias Mean") +
ylab("Validation Data Imputation Methods") +
theme_minimal() +
theme(legend.position = "none",
axis.text = element_text(size=14),
axis.title = element_text(size=16, face="bold"),
axis.text.x = element_text(size=14),
axis.text.y = element_text(size=14),
strip.text = element_text(size = 16),
panel.background = element_rect(fill = "gray90"),  # add background color to panels
panel.spacing.x = unit(0.5, "lines")) +  # increase space between panels
ggh4x::facet_grid2(target_measures ~ imp_method, scales = "free_x", independent = "x") +
scale_x_continuous(limits = function(x) c(-max(abs(x)), max(abs(x))),
breaks = scales::breaks_pretty(n = 3)) +  # set limits to center zero
theme(panel.border = element_rect(color = "black", fill = NA, size = 1.5),  # add border around panels
#
strip.text = element_text(size = 14, hjust = 0.5),  # modify panel label text
strip.placement = "outside")  +  # move panel labels outside of plot area
ggtitle("Implementation Data Imputation Methods") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5))
plot <- plot + theme(panel.grid.major = element_line(size = 1.5))
# Return the plot
return(plot)
}
setwd("/Users/user/AntoniaPhD/00. Thesis/thesis_new/Chapter 3 figures")
ggsave("MNARXY-MNARXY-0.5.png", units="in", width=11, height=10, dpi=300)
#MNARXY_ALL: Y = R1 = 0.5
plot_scenario("6197+6197") #MNARXY + MNARXY
plot_scenario <- function(sn) {
print(sn)
MNARXY_ALL = MNARXY_ALL
MNARXY_ALL$target_measures <- factor(MNARXY_ALL$target_measures, levels = c("AUC", "Calibration Intercept", "Calibration Slope", "Brier Score"))
plot <- ggplot(data = MNARY_ALL %>%
filter(scenario_combined == sn),
aes(x = bias_mean, y = dataset_val, color = factor(target_measures),
shape = factor(target_measures))) +
geom_errorbar(aes(xmin = LCI, xmax = UCI), width=.1) +
geom_point(size = 3, stroke = 0.5) +
guides(color = guide_legend(reverse = TRUE)) +
scale_shape_manual(values = c(8, 17, 16, 15)) +
scale_color_brewer(palette = "Set1") +
geom_vline(xintercept = 0, linetype="dotted") +
xlab("Bias Mean") +
ylab("Validation Data Imputation Methods") +
theme_minimal() +
theme(legend.position = "none",
axis.text = element_text(size=14),
axis.title = element_text(size=16, face="bold"),
axis.text.x = element_text(size=14),
axis.text.y = element_text(size=14),
strip.text = element_text(size = 16),
panel.background = element_rect(fill = "gray90"),  # add background color to panels
panel.spacing.x = unit(0.5, "lines")) +  # increase space between panels
ggh4x::facet_grid2(target_measures ~ imp_method, scales = "free_x", independent = "x") +
scale_x_continuous(limits = function(x) c(-max(abs(x)), max(abs(x))),
breaks = scales::breaks_pretty(n = 3)) +  # set limits to center zero
theme(panel.border = element_rect(color = "black", fill = NA, size = 1.5),  # add border around panels
#
strip.text = element_text(size = 14, hjust = 0.5),  # modify panel label text
strip.placement = "outside")  +  # move panel labels outside of plot area
ggtitle("Implementation Data Imputation Methods") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5))
plot <- plot + theme(panel.grid.major = element_line(size = 1.5))
# Return the plot
return(plot)
}
#MNARXY_ALL: Y = R1 = 0.5
plot_scenario("6197+6197") #MNARXY + MNARXY
plot_scenario <- function(sn) {
print(sn)
MNARXY_ALL = MNARXY_ALL
MNARXY_ALL$target_measures <- factor(MNARXY_ALL$target_measures, levels = c("AUC", "Calibration Intercept", "Calibration Slope", "Brier Score"))
plot <- ggplot(data = MNARY_ALL %>%
filter(scenario_combined == sn),
aes(x = bias_mean, y = dataset_val, color = factor(target_measures),
shape = factor(target_measures))) +
geom_errorbar(aes(xmin = LCI, xmax = UCI), width=.1) +
geom_point(size = 3, stroke = 0.5) +
guides(color = guide_legend(reverse = TRUE)) +
scale_shape_manual(values = c(8, 17, 16, 15)) +
scale_color_brewer(palette = "Set1") +
geom_vline(xintercept = 0, linetype="dotted") +
xlab("Bias Mean") +
ylab("Validation Data Imputation Methods") +
theme_minimal() +
theme(legend.position = "none",
axis.text = element_text(size=14),
axis.title = element_text(size=16, face="bold"),
axis.text.x = element_text(size=14),
axis.text.y = element_text(size=14),
strip.text = element_text(size = 16),
panel.background = element_rect(fill = "gray90"),  # add background color to panels
panel.spacing.x = unit(0.5, "lines")) +  # increase space between panels
ggh4x::facet_grid2(target_measures ~ imp_method, scales = "free_x", independent = "x") +
scale_x_continuous(limits = function(x) c(-max(abs(x)), max(abs(x))),
breaks = scales::breaks_pretty(n = 3)) +  # set limits to center zero
theme(panel.border = element_rect(color = "black", fill = NA, size = 1.5),  # add border around panels
#
strip.text = element_text(size = 14, hjust = 0.5),  # modify panel label text
strip.placement = "outside")  +  # move panel labels outside of plot area
ggtitle("Implementation Data Imputation Methods") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5))
plot <- plot + theme(panel.grid.major = element_line(size = 1.5))
# Return the plot
return(plot)
}
#MNARXY_ALL: Y = R1 = 0.5
plot_scenario("6197+6197") #MNARXY + MNARXY
rm(MNARXY_MEAN_BIAS)
setwd("~/AntoniaPhD/2. RSim/RESULTScontinuous/25x4")
MNARXY_MEAN_BIAS <- read.csv("MNARXY_MEAN_BIAS.csv")
MNARXY_MInoY_BIAS <- read.csv("MNARXY_MInoY_BIAS.csv")
MNARXY_MIwithY_BIAS <- read.csv("MNARXY_MIwithY_BIAS.csv")
#NB2: change factor levels of target measures
MNARXY_ALL <- MNARXY_MEAN_BIAS %>% mutate("imp_method" = "Imputed by mean") %>%
bind_rows(MNARXY_MInoY_BIAS %>% mutate("imp_method" = "MI without Y")) %>%
bind_rows(MNARXY_MIwithY_BIAS %>% mutate("imp_method" = "MI with Y"))
plot_scenario <- function(sn) {
print(sn)
MNARXY_ALL = MNARXY_ALL
MNARXY_ALL$target_measures <- factor(MNARXY_ALL$target_measures, levels = c("AUC", "Calibration Intercept", "Calibration Slope", "Brier Score"))
plot <- ggplot(data = MNARY_ALL %>%
filter(scenario_combined == sn),
aes(x = bias_mean, y = dataset_val, color = factor(target_measures),
shape = factor(target_measures))) +
geom_errorbar(aes(xmin = LCI, xmax = UCI), width=.1) +
geom_point(size = 3, stroke = 0.5) +
guides(color = guide_legend(reverse = TRUE)) +
scale_shape_manual(values = c(8, 17, 16, 15)) +
scale_color_brewer(palette = "Set1") +
geom_vline(xintercept = 0, linetype="dotted") +
xlab("Bias Mean") +
ylab("Validation Data Imputation Methods") +
theme_minimal() +
theme(legend.position = "none",
axis.text = element_text(size=14),
axis.title = element_text(size=16, face="bold"),
axis.text.x = element_text(size=14),
axis.text.y = element_text(size=14),
strip.text = element_text(size = 16),
panel.background = element_rect(fill = "gray90"),  # add background color to panels
panel.spacing.x = unit(0.5, "lines")) +  # increase space between panels
ggh4x::facet_grid2(target_measures ~ imp_method, scales = "free_x", independent = "x") +
scale_x_continuous(limits = function(x) c(-max(abs(x)), max(abs(x))),
breaks = scales::breaks_pretty(n = 3)) +  # set limits to center zero
theme(panel.border = element_rect(color = "black", fill = NA, size = 1.5),  # add border around panels
#
strip.text = element_text(size = 14, hjust = 0.5),  # modify panel label text
strip.placement = "outside")  +  # move panel labels outside of plot area
ggtitle("Implementation Data Imputation Methods") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5))
plot <- plot + theme(panel.grid.major = element_line(size = 1.5))
# Return the plot
return(plot)
}
#MNARXY_ALL: Y = R1 = 0.5
plot_scenario("6197+6197") #MNARXY + MNARXY
plot_scenario <- function(sn) {
print(sn)
MNARXY_ALL = MNARXY_ALL
MNARXY_ALL$target_measures <- factor(MNARXY_ALL$target_measures, levels = c("AUC", "Calibration Intercept", "Calibration Slope", "Brier Score"))
plot <- ggplot(data = MNARXY_ALL %>%
filter(scenario_combined == sn),
aes(x = bias_mean, y = dataset_val, color = factor(target_measures),
shape = factor(target_measures))) +
geom_errorbar(aes(xmin = LCI, xmax = UCI), width=.1) +
geom_point(size = 3, stroke = 0.5) +
guides(color = guide_legend(reverse = TRUE)) +
scale_shape_manual(values = c(8, 17, 16, 15)) +
scale_color_brewer(palette = "Set1") +
geom_vline(xintercept = 0, linetype="dotted") +
xlab("Bias Mean") +
ylab("Validation Data Imputation Methods") +
theme_minimal() +
theme(legend.position = "none",
axis.text = element_text(size=14),
axis.title = element_text(size=16, face="bold"),
axis.text.x = element_text(size=14),
axis.text.y = element_text(size=14),
strip.text = element_text(size = 16),
panel.background = element_rect(fill = "gray90"),  # add background color to panels
panel.spacing.x = unit(0.5, "lines")) +  # increase space between panels
ggh4x::facet_grid2(target_measures ~ imp_method, scales = "free_x", independent = "x") +
scale_x_continuous(limits = function(x) c(-max(abs(x)), max(abs(x))),
breaks = scales::breaks_pretty(n = 3)) +  # set limits to center zero
theme(panel.border = element_rect(color = "black", fill = NA, size = 1.5),  # add border around panels
#
strip.text = element_text(size = 14, hjust = 0.5),  # modify panel label text
strip.placement = "outside")  +  # move panel labels outside of plot area
ggtitle("Implementation Data Imputation Methods") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5))
plot <- plot + theme(panel.grid.major = element_line(size = 1.5))
# Return the plot
return(plot)
}
#MNARXY_ALL: Y = R1 = 0.5
plot_scenario("6197+6197") #MNARXY + MNARXY
ggsave("MNARXY-MNARXY-0.5.png", units="in", width=11, height=10, dpi=300)
plot_scenario <- function(sn) {
print(sn)
MNARXY_ALL = MNARXY_ALL
MNARXY_ALL$target_measures <- factor(MNARXY_ALL$target_measures, levels = c("AUC", "Calibration Intercept", "Calibration Slope", "Brier Score"))
plot <- ggplot(data = MNARXY_ALL %>%
filter(scenario_combined == sn),
aes(x = bias_mean, y = dataset.y, color = factor(target_measures),
shape = factor(target_measures))) +
geom_errorbar(aes(xmin = LCI, xmax = UCI), width=.1) +
geom_point(size = 3, stroke = 0.5) +
guides(color = guide_legend(reverse = TRUE)) +
scale_shape_manual(values = c(8, 17, 16, 15)) +
scale_color_brewer(palette = "Set1") +
geom_vline(xintercept = 0, linetype="dotted") +
xlab("Bias Mean") +
ylab("Validation Data Imputation Methods") +
theme_minimal() +
theme(legend.position = "none",
axis.text = element_text(size=14),
axis.title = element_text(size=16, face="bold"),
axis.text.x = element_text(size=14),
axis.text.y = element_text(size=14),
strip.text = element_text(size = 16),
panel.background = element_rect(fill = "gray90"),  # add background color to panels
panel.spacing.x = unit(0.5, "lines")) +  # increase space between panels
ggh4x::facet_grid2(target_measures ~ imp_method, scales = "free_x", independent = "x") +
scale_x_continuous(limits = function(x) c(-max(abs(x)), max(abs(x))),
breaks = scales::breaks_pretty(n = 3)) +  # set limits to center zero
theme(panel.border = element_rect(color = "black", fill = NA, size = 1.5),  # add border around panels
#
strip.text = element_text(size = 14, hjust = 0.5),  # modify panel label text
strip.placement = "outside")  +  # move panel labels outside of plot area
ggtitle("Implementation Data Imputation Methods") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5))
plot <- plot + theme(panel.grid.major = element_line(size = 1.5))
# Return the plot
return(plot)
}
#MNARXY_ALL: Y = R1 = 0.5
plot_scenario("6197+6197") #MNARXY + MNARXY
ggsave("MNARXY-MNARXY-0.5.png", units="in", width=11, height=10, dpi=300)
setwd("~/AntoniaPhD/2. RSim/RESULTScontinuous/25x4")
MNARXY_MEAN_BIAS <- read.csv("MNARXY_MEAN_BIAS.csv")
MNARXY_MInoY_BIAS <- read.csv("MNARXY_MInoY_BIAS.csv")
MNARXY_MIwithY_BIAS <- read.csv("MNARXY_MIwithY_BIAS.csv")
#NB2: change factor levels of target measures
MNARXY_ALL <- MNARXY_MEAN_BIAS %>% mutate("imp_method" = "Imputed by mean") %>%
bind_rows(MNARXY_MInoY_BIAS %>% mutate("imp_method" = "MI without Y")) %>%
bind_rows(MNARXY_MIwithY_BIAS %>% mutate("imp_method" = "MI with Y"))
plot_scenario <- function(sn) {
print(sn)
MNARXY_ALL = MNARXY_ALL
MNARXY_ALL$target_measures <- factor(MNARXY_ALL$target_measures, levels = c("AUC", "Calibration Intercept", "Calibration Slope", "Brier Score"))
plot <- ggplot(data = MNARXY_ALL %>%
filter(scenario_combined == sn),
aes(x = bias_mean, y = dataset.y, color = factor(target_measures),
shape = factor(target_measures))) +
geom_errorbar(aes(xmin = LCI, xmax = UCI), width=.1) +
geom_point(size = 3, stroke = 0.5) +
guides(color = guide_legend(reverse = TRUE)) +
scale_shape_manual(values = c(8, 17, 16, 15)) +
scale_color_brewer(palette = "Set1") +
geom_vline(xintercept = 0, linetype="dotted") +
xlab("Bias Mean") +
ylab("Validation Data Imputation Methods") +
theme_minimal() +
theme(legend.position = "none",
axis.text = element_text(size=14),
axis.title = element_text(size=16, face="bold"),
axis.text.x = element_text(size=14),
axis.text.y = element_text(size=14),
strip.text = element_text(size = 16),
panel.background = element_rect(fill = "gray90"),  # add background color to panels
panel.spacing.x = unit(0.5, "lines")) +  # increase space between panels
ggh4x::facet_grid2(target_measures ~ imp_method, scales = "free_x", independent = "x") +
scale_x_continuous(limits = function(x) c(-max(abs(x)), max(abs(x))),
breaks = scales::breaks_pretty(n = 3)) +  # set limits to center zero
theme(panel.border = element_rect(color = "black", fill = NA, size = 1.5),  # add border around panels
#
strip.text = element_text(size = 14, hjust = 0.5),  # modify panel label text
strip.placement = "outside")  +  # move panel labels outside of plot area
ggtitle("Implementation Data Imputation Methods") +
theme(plot.title = element_text(face = "bold", size = 16, hjust = 0.5))
plot <- plot + theme(panel.grid.major = element_line(size = 1.5))
# Return the plot
return(plot)
}
#MNARXY_ALL: Y = R1 = 0.5
plot_scenario("6197+6197") #MNARXY + MNARXY
setwd("/Users/user/AntoniaPhD/00. Thesis/thesis_new/Chapter 3 figures")
ggsave("MNARXY-MNARXY-0.5.png", units="in", width=11, height=10, dpi=300)
library(tidyverse)
library(magrittr)
library(dplyr)
library(ggplot2)
library(data.table)
library(RColorBrewer)
library(ggh4x)
# Iterations 1-25
##############################################################################################################
setwd("/Users/user/AntoniaPhD/2. RSim/RESULTScontinuous/25x1")
##############################################################################################################
#gives the filenames in the filepath
filenames <- list.files(pattern = ".rds")
#read all files to be concatenated
df_1 <- list.files(pattern = ".rds") %>%
map_dfr(readRDS)
#extract the scenario numbers from the rds files names (note 1 rds is missing?)
scenario_number <- as.numeric(str_extract(filenames, pattern = "[0-9]+"))
test_1 <- c()
for(i in 1:length(scenario_number)){ test_1 <- c(test_1, rep(scenario_number[i],900) ) }
df_1$scenario_number <- test_1
# Iterations 26 - 50
##############################################################################################################
# C H A N G E   D I R E C T O R Y
setwd("/Users/user/AntoniaPhD/2. RSim/RESULTScontinuous/25x2")
##############################################################################################################
filenames <- list.files(pattern = ".rds")
df_2 <- list.files(pattern = ".rds") %>%
map_dfr(readRDS)
#extract the scenario numbers from the rds files names
scenario_number <- as.numeric(str_extract(filenames, pattern = "[0-9]+"))
df_2$Iteration <- df_2$Iteration + 25
test_2 <- c()
for(i in 1:length(scenario_number)){ test_2 <- c(test_2, rep(scenario_number[i],900) ) }
df_2$scenario_number <- test_2
# Iterations 51 - 75
##############################################################################################################
# C H A N G E   D I R E C T O R Y
setwd("/Users/user/AntoniaPhD/2. RSim/RESULTScontinuous/25x3")
##############################################################################################################
filenames <- list.files(pattern = ".rds")
df_3 <- list.files(pattern = ".rds") %>%
map_dfr(readRDS)
library(tidyverse)
library(magrittr)
library(dplyr)
library(ggplot2)
library(data.table)
library(RColorBrewer)
library(ggh4x)
# Iterations 1-25
##############################################################################################################
setwd("/Users/user/AntoniaPhD/2. RSim/RESULTScontinuous/25x1")
##############################################################################################################
#gives the filenames in the filepath
filenames <- list.files(pattern = ".rds")
#read all files to be concatenated
df_1 <- list.files(pattern = ".rds") %>%
map_dfr(readRDS)
#extract the scenario numbers from the rds files names (note 1 rds is missing?)
scenario_number <- as.numeric(str_extract(filenames, pattern = "[0-9]+"))
test_1 <- c()
for(i in 1:length(scenario_number)){ test_1 <- c(test_1, rep(scenario_number[i],900) ) }
df_1$scenario_number <- test_1
# Iterations 26 - 50
##############################################################################################################
# C H A N G E   D I R E C T O R Y
setwd("/Users/user/AntoniaPhD/2. RSim/RESULTScontinuous/25x2")
##############################################################################################################
filenames <- list.files(pattern = ".rds")
df_2 <- list.files(pattern = ".rds") %>%
map_dfr(readRDS)
#extract the scenario numbers from the rds files names
scenario_number <- as.numeric(str_extract(filenames, pattern = "[0-9]+"))
df_2$Iteration <- df_2$Iteration + 25
test_2 <- c()
for(i in 1:length(scenario_number)){ test_2 <- c(test_2, rep(scenario_number[i],900) ) }
df_2$scenario_number <- test_2
# Iterations 51 - 75
##############################################################################################################
# C H A N G E   D I R E C T O R Y
setwd("/Users/user/AntoniaPhD/2. RSim/RESULTScontinuous/25x3")
##############################################################################################################
filenames <- list.files(pattern = ".rds")
df_3 <- list.files(pattern = ".rds") %>%
map_dfr(readRDS)
#extract the scenario numbers from the rds files names (note 1 rds is missing?)
scenario_number <- as.numeric(str_extract(filenames, pattern = "[0-9]+"))
df_3$Iteration <- df_3$Iteration + 50
test_3 <- c()
for(i in 1:length(scenario_number)){ test_3 <- c(test_3, rep(scenario_number[i],900) ) }
df_3$scenario_number <- test_3
# Iterations 76 - 100
##############################################################################################################
# C H A N G E   D I R E C T O R Y
setwd("/Users/user/AntoniaPhD/2. RSim/RESULTScontinuous/25x4")
##############################################################################################################
filenames <- list.files(pattern = ".rds")
df_4 <- list.files(pattern = ".rds") %>%
map_dfr(readRDS)
#extract the scenario numbers from the rds files names (note 1 rds is missing?)
scenario_number <- as.numeric(str_extract(filenames, pattern = "[0-9]+"))
df_4$Iteration <- df_4$Iteration + 75
test_4 <- c()
for(i in 1:length(scenario_number)){ test_4 <- c(test_4, rep(scenario_number[i],900) ) }
df_4$scenario_number <- test_4
##############################################################################################################
# concatenate df_1, df_2, df_3 and df_4 into one big data frame
df_all_iter <- rbind(df_1, df_2, df_3, df_4)
df_all_iter <- df_all_iter[, -c(5,7,9,11)] #use select instead
##############################################################################################################
rm(df_1)
rm(df_2)
rm(df_3)
rm(df_4)
df_long <- pivot_longer(df_all_iter, 4:7, names_to = "target_measures", values_to = "estimates") %>%
filter(mod == 1)
rm(df_all_iter)
sims_parameters <- readRDS(file = "sims_parameters.RDS") %>%
mutate(scenario_number = 1:n())
df_scenario_number <- left_join(df_long, sims_parameters, by = "scenario_number")
rm(df_long)
##### add DAG type to the df ######
df_DAG <- df_scenario_number %>%
mutate(
DAG_type = case_when(
beta_x1 == 0 & beta_x2 == 0 & beta_U == 0 ~ "MCAR",
beta_x1 == 0 & beta_x2 != 0 & beta_U == 0 ~ "MAR",
beta_x1 != 0 & beta_x2 != 0 & beta_U == 0 ~ "MNAR1",
beta_x1 == 0 & beta_x2 != 0 & beta_U != 0 ~ "MNAR2",
beta_x1 != 0 & beta_x2 != 0 & beta_U != 0 ~ "MNAR3",
beta_x1 != 0 & beta_x2 == 0 & beta_U != 0 ~ "MNAR*", #DAG that we don't consider: Missingness depends on itself and on some unobserved variable
beta_x1 != 0 & beta_x2 == 0 & beta_U == 0 ~ "MNAR**", #DAG that we don't consider: Missingness depends on itself only
beta_x1 == 0 & beta_x2 == 0 & beta_U != 0 ~ "MNAR***", #DAG that we don't consider: Missingness depends on some unobserved variable only
TRUE ~ as.character("error")
)
)
rm(df_scenario_number)
df_DAG <- df_DAG %>%
mutate(target_measures = recode(target_measures,
AUC = 'AUC',
Brier = 'Brier Score',
Cal_Int = 'Calibration Intercept',
Cal_Slope = 'Calibration Slope'))
df_DAG$target_measures <- factor(df_DAG$target_measures,
levels = c("AUC", "Calibration Intercept", "Calibration Slope", "Brier Score"))
###################################################################
#(1) split data into val and imp datasets
df_val <- df_DAG[df_DAG$dataset %like% "val", ]
df_imp <- df_DAG[df_DAG$dataset %like% "imp", ]
df_val <- df_val %>%
mutate(
dataset = case_when(
dataset == "CCA_val_data" ~ "CCA",
dataset == "MI_val_data_noY" ~ "MI no Y",
dataset == "MI_val_data_withY" ~ "MI with Y",
dataset == "mean_val" ~ "Imputed by mean",
TRUE ~ dataset))
